1) Find newspaper cliping:

example
https://www.newspapers.com/
https://www.newspapers.com/browse/
https://www.newspapers.com/browse/united-states
https://www.newspapers.com/browse/united-states/new-york
https://www.newspapers.com/browse/united-states/new-york/buffalo
https://www.newspapers.com/browse/united-states/new-york/buffalo/the-buffalo-news_31511
https://www.newspapers.com/browse/united-states/new-york/buffalo/the-buffalo-news_31511/1989
https://www.newspapers.com/browse/united-states/new-york/buffalo/the-buffalo-news_31511/1989/09
Etc....

Save cliping to:
H:\Users\demck\Google Drive\Documents\Football\HSF\Newspapers\Next

Open file with by goging to goodle.drive:
https://drive.google.com/drive/folders/11S0fz14kWaupi7yrlMaG0OwGrj_kcZUX
https://drive.google.com/drive/folders/11S0fz14kWaupi7yrlMaG0OwGrj_kcZUX?usp=drive_link

click on file & right click, "Open with"; "Google Docs"

Copy text to excel sheet
clean up (one column team a, score team a; team b, team b score

copy contents to new file in notepad++ and save as newspaper cliping file title text into staged folder ie:
 "H:\Users\demck\Google Drive\Documents\Football\HSF\Newspapers\Staged\The_Buffalo_News_1989_10_15_60.txt"
 
 2) Stage/map ocr data to inser into HS_Scores table.
  
 Open/Go to VS Code, opten terminal
 
cd C:\Users\demck\OneDrive\Football_2024\static-football-rankings\python_scripts
Activate your Python virtual environment:

.\venv\Scripts\Activate
 
cd C:\Users\demck\OneDrive\Football_2024\static-football-rankings\python_scripts\Newspapers

should appear like:
 (venv) PS C:\Users\demck\OneDrive\Football_2024\static-football-rankings\python_scripts\Newspapers>      
  - should have (venv) to in python virtual 
 
 prep csv file by
 python ocr_script_loops.py
 
 sample output:
 
 (venv) PS C:\Users\demck\OneDrive\Football_2024\static-football-rankings\python_scripts\Newspapers> python ocr_script_loops.py        
üìÇ Found 1 OCR files to process

üìÑ Processing: The_Buffalo_News_1989_10_15_60.txt
üîç Normalized: 'Akron' ‚Üí 'akron'

üîç Normalized: 'Gates-Chili' ‚Üí 'gateschili'
‚ö†Ô∏è Unrecognized team: Gates-Chili - Needs manual verification
üîç Normalized: 'Wmsv. South' ‚Üí 'wmsv south'
üîç Normalized: 'Wmsv. East' ‚Üí 'wmsv east'

need to add "Unrecognized team" to name mapping by:

runing this in sql:

MERGE INTO HS_Team_Name_Alias AS target
USING (VALUES
    ('Gates-Chili', 'Rochester Gates-Chili (NY)', 'Buffalo News')
) AS source (Alias_Name, Standardized_Name, Newspaper_Region)
ON target.Alias_Name = source.Alias_Name
WHEN NOT MATCHED THEN 
    INSERT (Alias_Name, Standardized_Name, Newspaper_Region)
    VALUES (source.Alias_Name, source.Standardized_Name, source.Newspaper_Region);


*** note handling special characters:
MERGE INTO HS_Team_Name_Alias AS target
USING (VALUES
    ('Rochester Kearney', 'Rochester Bishop Kearney (NY)', 'Buffalo News'),
    ('Rochester McQuaid', 'Rochester McQuaid Jesuit (NY)', 'Buffalo News'),
    ('St. Mary''s Lancaster', 'Lancaster St. Mary''s (NY)', 'Buffalo News'),
    ('Canisteo (Pa.)', 'Canisteo (NY)', 'Buffalo News')
) AS source (Alias_Name, Standardized_Name, Newspaper_Region)
ON target.Alias_Name = source.Alias_Name
WHEN NOT MATCHED THEN 
    INSERT (Alias_Name, Standardized_Name, Newspaper_Region)
    VALUES (source.Alias_Name, source.Standardized_Name, source.Newspaper_Region);
	
	
 
 ('Gates-Chili', = alias
 'Rochester Gates-Chili (NY)',= proper name found in ms access database or sql HS_Names table
 'Buffalo News')= Newspaper - this helps define local alias
 
 rerun -  python ocr_script_loops.py until all names are mapped (no unrecognized teams)
 
 3) Insert into sql database HS_Scores table
 
 run:

 python process_newspaper_scores.py
 
 output should look like this:
 (venv) PS C:\Users\demck\OneDrive\Football_2024\static-football-rankings\python_scripts\Newspapers> python process_newspaper_scores.py
üîÑ Loading CSV file...
üìä Initial row count: 46
‚úÖ Assigned Date: 1989-10-08, Season: 1989, Source: The Buffalo News 1989 10 08 59.txt
üíæ Saving formatted CSV...
‚úÖ Cleaned CSV saved at: H:/Users/demck/Google Drive/Documents/Football/HSF/Newspapers/Staged\cleaned_scores_for_bulk_insert.csv
   Final row count: 46

üì• Performing database insert...
üîÑ Attempting pandas to_sql method...
‚úÖ Insert successful!

‚ú® Process complete!

4) Remove duplicates

SQL 
EXEC dbo.RemoveDuplicateGames
GO




   Previous & Exetended work flow.

üèà Workflow: OCR to HS_Scores Table (High School Football Rankings Project)
Objective:
Transform image-based high school football scores into structured SQL data while ensuring accuracy and removing duplicates.

1Ô∏è‚É£ Preparation Phase
1.1 Place Image(s) in the Staged Folder
Ensure image files (.jpg, .png, etc.) are located in:
üìÇ H:/Users/demck/Google Drive/Documents/Football/HSF/Newspapers/Staged
2Ô∏è‚É£ OCR Processing Phase
2.1 Run Image-to-Text Conversion
Execute the OCR processing script to extract text from images:
sh
Copy
Edit
python process_staged_images.py
This will generate OCR result files (.txt) for each image in the same Staged folder.
2.2 Verify OCR Output
Navigate to Staged and check the generated .txt file(s).
Example output:
python-repl
Copy
Edit
West Seneca East 25, North Tonawanda 7
West Seneca West 19, Kenmore West 6
Starpoint 19, East Aurora 7
...
3Ô∏è‚É£ Standardization & Cleanup Phase
3.1 Run Team Name Standardization & Score Extraction
Execute the OCR data processing script:
sh
Copy
Edit
python ocr_script.py
This script: ‚úÖ Reads OCR results from .txt
‚úÖ Standardizes team names using HS_Team_Name_Alias table
‚úÖ Logs unrecognized teams for manual review
‚úÖ Saves the cleaned scores to:
üìÑ H:/Users/demck/Google Drive/Documents/Football/HSF/Newspapers/Staged/cleaned_scores.csv
3.2 Resolve Unrecognized Teams (if any)
If the script outputs warnings like:
mathematica
Copy
Edit
‚ö†Ô∏è Unrecognized team: O'Hara - Needs manual verification
Manually review & update HS_Team_Name_Alias table using:
sql
Copy
Edit
INSERT INTO HS_Team_Name_Alias (Alias_Name, Standardized_Name, Newspaper_Region)
VALUES ('O'Hara', 'Tonawanda Cardinal O'Hara (NY)', 'Buffalo News');
Re-run ocr_script.py until all teams are recognized.
4Ô∏è‚É£ Import to HS_Scores Table
4.1 Load Cleaned Data into SQL
Use SQL Server‚Äôs Bulk Insert or Pandas to_sql:
python
Copy
Edit
import pandas as pd
from sqlalchemy import create_engine

engine = create_engine("mssql+pyodbc://MCKNIGHTS-PC\\SQLEXPRESS01/hs_football_database?driver=ODBC+Driver+17+for+SQL+Server&trusted_connection=yes")
df = pd.read_csv("H:/Users/demck/Google Drive/Documents/Football/HSF/Newspapers/Staged/cleaned_scores.csv")
df.to_sql("HS_Scores", engine, if_exists="append", index=False)
Alternatively, use SQL Bulk Insert:
sql
Copy
Edit
BULK INSERT dbo.HS_Scores
FROM 'H:/Users/demck/Google Drive/Documents/Football/HSF/Newspapers/Staged/cleaned_scores.csv'
WITH (
    FORMAT = 'CSV',
    FIRSTROW = 2,
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    TABLOCK
);
5Ô∏è‚É£ Duplicate Removal Phase
5.1 Execute the Stored Procedure to Remove Duplicates
Run the duplicate removal procedure:
sql
Copy
Edit
EXEC dbo.RemoveDuplicateGames;
This will clean any redundant entries from HS_Scores.
6Ô∏è‚É£ Final Validation
6.1 Verify Data in SQL
Check that the data is correctly inserted:
sql
Copy
Edit
SELECT * FROM dbo.HS_Scores ORDER BY Date_Added DESC;
Ensure the number of rows matches expectations.
6.2 Archive Processed Files
Move processed files (.txt & .csv) to an archive folder:
sh
Copy
Edit
mv "H:/Users/demck/Google Drive/Documents/Football/HSF/Newspapers/Staged/*.txt" "H:/Users/demck/Google Drive/Documents/Football/HSF/Newspapers/Processed/"
mv "H:/Users/demck/Google Drive/Documents/Football/HSF/Newspapers/Staged/*.csv" "H:/Users/demck/Google Drive/Documents/Football/HSF/Newspapers/Processed/"
‚úÖ Summary: Automated Workflow
1Ô∏è‚É£ Drop images into Staged
2Ô∏è‚É£ Run process_staged_images.py ‚Üí Extract text from images
3Ô∏è‚É£ Run ocr_script.py ‚Üí Standardize names & extract scores
4Ô∏è‚É£ Manually resolve any unrecognized teams in HS_Team_Name_Alias
5Ô∏è‚É£ Import cleaned_scores.csv into HS_Scores
6Ô∏è‚É£ Run EXEC dbo.RemoveDuplicateGames; to remove duplicates
7Ô∏è‚É£ Verify data & archive processed files

üöÄ Next Steps
If this workflow looks good to you, we can:

Automate Steps 2-7 into a single script (process_scores.py).
Log errors & report missing teams before running inserts.
Enhance duplicate detection logic if needed.
Let me know what you‚Äôd like to do next!